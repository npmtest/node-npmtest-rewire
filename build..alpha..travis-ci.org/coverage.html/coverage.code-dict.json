{"/home/travis/build/npmtest/node-npmtest-rewire/test.js":"/* istanbul instrument in package npmtest_rewire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rewire/lib.npmtest_rewire.js":"/* istanbul instrument in package npmtest_rewire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rewire = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rewire = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rewire/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rewire && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rewire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rewire\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rewire.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_rewire.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rewire.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_rewire.__dirname +\n                    '/lib.npmtest_rewire.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/index.js":"var rewireModule = require(\"./rewire.js\");\r\n\r\n/**\r\n * Adds a special setter and getter to the module located at filename. After the module has been rewired, you can\r\n * call myModule.__set__(name, value) and myModule.__get__(name) to manipulate private variables.\r\n *\r\n * @param {!String} filename Path to the module that shall be rewired. Use it exactly like require().\r\n * @return {*} the rewired module\r\n */\r\nfunction rewire(filename) {\r\n    return rewireModule(module.parent, filename);\r\n}\r\n\r\nmodule.exports = rewire;\r\n\r\ndelete require.cache[__filename];   // deleting self from module cache so the parent module is always up to date","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/rewire.js":"var Module = require(\"module\"),\n    fs = require(\"fs\"),\n    getImportGlobalsSrc = require(\"./getImportGlobalsSrc.js\"),\n    getDefinePropertySrc = require(\"./getDefinePropertySrc.js\"),\n    detectStrictMode = require(\"./detectStrictMode.js\"),\n    moduleEnv = require(\"./moduleEnv.js\");\n\n/**\n * Does actual rewiring the module. For further documentation @see index.js\n */\nfunction internalRewire(parentModulePath, targetPath) {\n    var targetModule,\n        prelude,\n        appendix,\n        src;\n\n    // Checking params\n    if (typeof targetPath !== \"string\") {\n        throw new TypeError(\"Filename must be a string\");\n    }\n\n    // Resolve full filename relative to the parent module\n    targetPath = Module._resolveFilename(targetPath, parentModulePath);\n\n    // Special support for older node versions that returned an array on Module._resolveFilename\n    // @see https://github.com/joyent/node/blob/865b077819a9271a29f982faaef99dc635b57fbc/lib/module.js#L319\n    // TODO Remove this switch on the next major release\n    /* istanbul ignore next because it will be removed soon */\n    if (Array.isArray(targetPath)) {\n        targetPath = targetPath[1];\n    }\n\n    // Create testModule as it would be created by require()\n    targetModule = new Module(targetPath, parentModulePath);\n\n    // We prepend a list of all globals declared with var so they can be overridden (without changing original globals)\n    prelude = getImportGlobalsSrc();\n\n    // Wrap module src inside IIFE so that function declarations do not clash with global variables\n    // @see https://github.com/jhnns/rewire/issues/56\n    prelude += \"(function () { \";\n\n    // We append our special setter and getter.\n    appendix = \"\\n\" + getDefinePropertySrc();\n\n    // End of IIFE\n    appendix += \"})();\";\n\n    // Check if the module uses the strict mode.\n    // If so we must ensure that \"use strict\"; stays at the beginning of the module.\n    src = fs.readFileSync(targetPath, \"utf8\");\n    if (detectStrictMode(src) === true) {\n        prelude = ' \"use strict\"; ' + prelude;\n    }\n\n    moduleEnv.inject(prelude, appendix);\n    moduleEnv.load(targetModule);\n\n    return targetModule.exports;\n}\n\nmodule.exports = internalRewire;\n","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/getImportGlobalsSrc.js":"/**\n * Declares all globals with a var and assigns the global object. Thus you're able to\n * override globals without changing the global object itself.\n *\n * Returns something like\n * \"var console = global.console; var process = global.process; ...\"\n *\n * @return {String}\n */\nfunction getImportGlobalsSrc(ignore) {\n    var key,\n        value,\n        src = \"\",\n        globalObj = typeof global === \"undefined\"? window: global;\n\n    ignore = ignore || [];\n    // global itself can't be overridden because it's the only reference to our real global objects\n    ignore.push(\"global\");\n    // ignore 'module', 'exports' and 'require' on the global scope, because otherwise our code would\n    // shadow the module-internal variables\n    // @see https://github.com/jhnns/rewire-webpack/pull/6\n    ignore.push(\"module\", \"exports\", \"require\");\n\n    for (key in globalObj) { /* jshint forin: false */\n        if (ignore.indexOf(key) !== -1) {\n            continue;\n        }\n        value = globalObj[key];\n\n        // key may be an invalid variable name (e.g. 'a-b')\n        try {\n          eval(\"var \" + key + \";\");\n          src += \"var \" + key + \" = global.\" + key + \"; \";\n        } catch(e) {}\n    }\n\n    return src;\n}\n\nmodule.exports = getImportGlobalsSrc;\n","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/getDefinePropertySrc.js":"\"use strict\";\n\nvar __get__ = require(\"./__get__.js\");\nvar __set__ = require (\"./__set__.js\");\nvar __with__ = require(\"./__with__.js\");\n\nvar srcs = {\n    \"__get__\": __get__.toString(),\n    \"__set__\": __set__.toString(),\n    \"__with__\": __with__.toString()\n};\n\nfunction getDefinePropertySrc() {\n    var src = \"if (typeof(module.exports) === 'function' || \\n\" +\n            \"(typeof(module.exports) === 'object' && module.exports !== null && Object.isExtensible(module.exports))) {\\n\";\n\n    src += Object.keys(srcs).reduce(function forEachSrc(preValue, value) {\n        return preValue += \"Object.defineProperty(module.exports, '\" +\n            value +\n            \"', {enumerable: false, value: \" +\n            srcs[value] +\n            \", \"+\n            \"writable: true}); \";\n    }, \"\");\n\n    src += \"\\n}\";\n\n    return src;\n}\n\nmodule.exports = getDefinePropertySrc;\n","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/__get__.js":"/**\r\n * This function will be stringified and then injected into every rewired module.\r\n * Then you can leak private variables by calling myModule.__get__(\"myPrivateVar\");\r\n *\r\n * All variables within this function are namespaced in the arguments array because every\r\n * var declaration could possibly clash with a variable in the module scope.\r\n *\r\n * @param {!String} name name of the variable to retrieve\r\n * @throws {TypeError}\r\n * @return {*}\r\n */\r\nfunction __get__() {\r\n    arguments.varName = arguments[0];\r\n    if (arguments.varName && typeof arguments.varName === \"string\") {\r\n        return eval(arguments.varName);\r\n    } else {\r\n        throw new TypeError(\"__get__ expects a non-empty string\");\r\n    }\r\n}\r\n\r\nmodule.exports = __get__;","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/__set__.js":"/**\n * This function will be stringified and then injected into every rewired module.\n * Then you can set private variables by calling myModule.__set__(\"myPrivateVar\", newValue);\n *\n * All variables within this function are namespaced in the arguments array because every\n * var declaration could possibly clash with a variable in the module scope.\n *\n * @param {String|Object} varName name of the variable to set\n * @param {String} varValue new value\n * @return {Function}\n */\nfunction __set__() {\n    arguments.varName = arguments[0];\n    arguments.varValue = arguments[1];\n    // Saving references to global objects and functions. Thus a test may even change these variables\n    // without interfering with rewire().\n    // @see https://github.com/jhnns/rewire/issues/40\n    arguments.refs = arguments[2] || {\n        isArray: Array.isArray,\n        TypeError: TypeError,\n        stringify: JSON.stringify\n        // We can't save eval() because eval() is a *special* global function\n        // That's why it can't be re-assigned in strict mode\n        //eval: eval\n    };\n    arguments.src = \"\";\n    arguments.revertArgs = [];\n\n    if (typeof arguments[0] === \"object\") {\n        arguments.env = arguments.varName;\n        if (!arguments.env || arguments.refs.isArray(arguments.env)) {\n            throw new arguments.refs.TypeError(\"__set__ expects an object as env\");\n        }\n        arguments.revertArgs[0] = {};\n        for (arguments.varName in arguments.env) {\n            if (arguments.env.hasOwnProperty(arguments.varName)) {\n                arguments.varValue = arguments.env[arguments.varName];\n                arguments.src += arguments.varName + \" = arguments.env[\" + arguments.refs.stringify(arguments.varName) + \"]; \";\n                try {\n                    // Allow tests to mock implicit globals\n                    // @see https://github.com/jhnns/rewire/issues/35\n                    arguments.revertArgs[0][arguments.varName] = eval(arguments.varName);\n                } catch (err) {\n                    arguments.revertArgs[0][arguments.varName] = undefined;\n                }\n            }\n        }\n    } else if (typeof arguments.varName === \"string\") {\n        if (!arguments.varName) {\n            throw new arguments.refs.TypeError(\"__set__ expects a non-empty string as a variable name\");\n        }\n        arguments.src = arguments.varName + \" = arguments.varValue;\";\n        try {\n            // Allow tests to mock implicit globals\n            // @see https://github.com/jhnns/rewire/issues/35\n            arguments.revertArgs = [arguments.varName, eval(arguments.varName)];\n        } catch (err) {\n            arguments.revertArgs = [arguments.varName, undefined];\n        }\n    } else {\n        throw new arguments.refs.TypeError(\"__set__ expects an environment object or a non-empty string as a variable name\");\n    }\n\n    // Passing our saved references on to the revert function\n    arguments.revertArgs[2] = arguments.refs;\n\n    eval(arguments.src);\n\n    return function (revertArgs) {\n        __set__.apply(null, revertArgs);\n    }.bind(null, arguments.revertArgs);\n}\n\nmodule.exports = __set__;\n","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/__with__.js":"\"use strict\";\n\n/**\n * This function will be stringified and then injected into every rewired module.\n *\n * Calling myModule.__with__(\"myPrivateVar\", newValue) returns a function where\n * you can place your tests. As long as the returned function is executed variables\n * will be set to the given value, after that all changed variables are reset back to normal.\n *\n * @param {String|Object} varName name of the variable to set\n * @param {String} varValue new value\n * @return {Function}\n */\nfunction __with__() {\n    var args = arguments;\n\n    return function (callback) {\n        var undo,\n            returned,\n            isPromise;\n\n        if (typeof callback !== \"function\") {\n            throw new TypeError(\"__with__ expects a callback function\");\n        }\n\n        undo = module.exports.__set__.apply(null, args);\n\n        try {\n            returned = callback();\n            isPromise = returned && typeof returned.then === \"function\";\n            if (isPromise) {\n                returned.then(undo, undo);\n                return returned;\n            }\n        } finally {\n            if (!isPromise) {\n                undo();\n            }\n        }\n    };\n}\n\nmodule.exports = __with__;","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/detectStrictMode.js":"var multiLineComment = /^\\s*\\/\\*.*?\\*\\//;\r\nvar singleLineComment = /^\\s*\\/\\/.*?[\\r\\n]/;\r\nvar strictMode = /^\\s*(?:\"use strict\"|'use strict')[ \\t]*(?:[\\r\\n]|;)/;\r\n\r\n/**\r\n * Returns true if the source code is intended to run in strict mode. Does not detect\r\n * \"use strict\" if it occurs in a nested function.\r\n *\r\n * @param {String} src\r\n * @return {Boolean}\r\n */\r\nfunction detectStrictMode(src) {\r\n    var singleLine;\r\n    var multiLine;\r\n\r\n    while ((singleLine = singleLineComment.test(src)) || (multiLine = multiLineComment.test(src))) {\r\n        if (singleLine) {\r\n            src = src.replace(singleLineComment, \"\");\r\n        }\r\n        if (multiLine) {\r\n            src = src.replace(multiLineComment, \"\");\r\n        }\r\n    }\r\n\r\n    return strictMode.test(src);\r\n}\r\n\r\nmodule.exports = detectStrictMode;\r\n","/home/travis/build/npmtest/node-npmtest-rewire/rewire/lib/moduleEnv.js":"\"use strict\";\n\nvar Module = require(\"module\"),\n    fs = require(\"fs\"),\n    coffee;\n\n    // caching original wrapper\nvar moduleWrapper0 = Module.wrapper[0],\n    moduleWrapper1 = Module.wrapper[1],\n    originalExtensions = {},\n    nodeRequire,\n    currentModule;\n\nfunction load(targetModule) {\n    nodeRequire = targetModule.require;\n    targetModule.require = requireProxy;\n    currentModule = targetModule;\n\n    registerExtensions();\n    targetModule.load(targetModule.id);\n\n    // This is only necessary if nothing has been required within the module\n    reset();\n}\n\nfunction reset() {\n    Module.wrapper[0] = moduleWrapper0;\n    Module.wrapper[1] = moduleWrapper1;\n    restoreExtensions();\n}\n\nfunction inject(prelude, appendix) {\n    Module.wrapper[0] = moduleWrapper0 + prelude;\n    Module.wrapper[1] = appendix + moduleWrapper1;\n}\n\n/**\n * Proxies the first require call in order to draw back all changes to the Module.wrapper.\n * Thus our changes don't influence other modules\n *\n * @param {!String} path\n */\nfunction requireProxy(path) {\n    reset();\n    currentModule.require = nodeRequire;\n    return nodeRequire.call(currentModule, path);  // node's require only works when \"this\" points to the module\n}\n\nfunction registerExtensions() {\n    var originalCoffeeExtension = require.extensions[\".coffee\"];\n\n    if (originalCoffeeExtension) {\n        originalExtensions.coffee = originalCoffeeExtension;\n    }\n    require.extensions[\".coffee\"] = coffeeExtension;\n}\n\nfunction restoreExtensions() {\n    if (\"coffee\" in originalExtensions) {\n        require.extensions[\".coffee\"] = originalExtensions.coffee;\n    }\n}\n\nfunction coffeeExtension(module, filename) {\n    var content = stripBOM(fs.readFileSync(filename, \"utf8\"));\n\n    content = coffee.compile(content, {\n        filename: filename,\n        bare: true\n    });\n    module._compile(content, filename);\n}\n\n/**\n * @see https://github.com/joyent/node/blob/master/lib/module.js\n */\nfunction stripBOM(content) {\n    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n    // because the buffer-to-string conversion in `fs.readFileSync()`\n    // translates it to FEFF, the UTF-16 BOM.\n    if (content.charCodeAt(0) === 0xFEFF) {\n        content = content.slice(1);\n    }\n    return content;\n}\n\ntry {\n    coffee = require(\"coffee-script\");\n} catch (err) {\n    // We are not able to provide coffee-script support, but that's ok as long as the user doesn't want it.\n}\n\nexports.load = load;\nexports.inject = inject;\n"}